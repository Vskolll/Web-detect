# bot.py ‚Äî OneClick v5 (index.html?slug=..., –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞, –º–æ–¥–µ—Ä–∞—Ü–∏—è —á–µ–∫–æ–≤)

import os
import re
import json
import secrets
import string
import logging
from dataclasses import dataclass
from typing import Optional, Dict
from datetime import datetime, timedelta, timezone

from aiohttp import ClientSession, ClientTimeout
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Message,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("bot")

# ---------- –ö–û–ù–°–¢–ê–ù–¢–´ ----------
load_dotenv()
PAY_AMOUNT_RUB = 5000
PAY_CARD = "4323 3473 6843 0150"
ACCESS_WINDOW = timedelta(days=30)
TIMEOUT = ClientTimeout(total=20)

ADMIN_TELEGRAM_ID_DEFAULT = 7106053083  # ‚Üê —Ç–≤–æ–π –∞–¥–º–∏–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

@dataclass
class Config:
    token: str
    admin_secret: str
    api_base: str
    public_base: str
    admin_telegram_id: int

def get_config() -> Config:
    token = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
    admin_secret = os.getenv("ADMIN_API_SECRET", "").strip()
    api_base = os.getenv("API_BASE", "https://geo-photo-report.onrender.com").rstrip("/")
    public_base = os.getenv("PUBLIC_BASE", "https://cick.one").rstrip("/")
    admin_tid_env = os.getenv("ADMIN_TELEGRAM_ID", "").strip()

    if not token or not admin_secret:
        raise RuntimeError("‚ùå –ù—É–∂–Ω—ã TELEGRAM_BOT_TOKEN –∏ ADMIN_API_SECRET –≤ .env")

    if admin_tid_env.isdigit():
        admin_tid = int(admin_tid_env)
    else:
        admin_tid = ADMIN_TELEGRAM_ID_DEFAULT

    return Config(token, admin_secret, api_base, public_base, admin_tid)

CFG = get_config()

# ---------- –°–û–°–¢–û–Ø–ù–ò–Ø ----------
class AccessState:
    def __init__(self):
        self.users: Dict[int, dict] = {}
        self.wait_link: set[int] = set()

    def get(self, uid: int) -> dict:
        if uid not in self.users:
            self.users[uid] = {
                "status": "none",    # none | waiting | active
                "expires_at": None,  # datetime | None
                "link_quota": 0,     # –≤—ã–¥–∞—ë—Ç—Å—è 1 –ø–æ—Å–ª–µ approve
            }
        return self.users[uid]

    def approve(self, uid: int):
        now = datetime.now(timezone.utc)
        st = self.get(uid)
        st["status"] = "active"
        st["expires_at"] = now + ACCESS_WINDOW
        st["link_quota"] = 1

    def reject(self, uid: int):
        st = self.get(uid)
        st["status"] = "none"
        st["expires_at"] = None
        st["link_quota"] = 0

    def is_active(self, uid: int) -> bool:
        st = self.get(uid)
        return st["status"] == "active" and st["expires_at"] and st["expires_at"] > datetime.now(timezone.utc)

    def remaining(self, uid: int) -> timedelta:
        st = self.get(uid)
        if st["expires_at"]:
            return max(st["expires_at"] - datetime.now(timezone.utc), timedelta(0))
        return timedelta(0)

STATE = AccessState()

# ---------- –£–¢–ò–õ–ò–¢–´ ----------
def slugify(s: str) -> str:
    s = (s or "").lower()
    s = re.sub(r"[^a-z0-9\-]+", "-", s)
    return re.sub(r"-{2,}", "-", s).strip("-")[:40]

def gen_slug(base: Optional[str]) -> str:
    base = slugify(base or "") or "user"
    tail = "".join(secrets.choice(string.hexdigits.lower()) for _ in range(4))
    return f"{base}-{tail}"

def format_remaining(td: timedelta) -> str:
    total = int(td.total_seconds())
    if total < 0:
        total = 0
    d, rem = divmod(total, 86400)
    h, rem = divmod(rem, 3600)
    m = rem // 60
    return f"{d} –¥–Ω {h} —á {m} –º–∏–Ω"

def copy_keyboard(slug_url: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"copy:{slug_url}")],
        [InlineKeyboardButton("üß© –í—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥", callback_data="insert_code")],
        [InlineKeyboardButton("‚è≥ –û—Å—Ç–∞—Ç–æ–∫", callback_data="timer")],
    ])

def timer_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚è≥ –û—Å—Ç–∞—Ç–æ–∫", callback_data="timer")]])

# ---------- HTTP API ----------
async def api_post(session: ClientSession, endpoint: str, payload: dict) -> dict:
    url = f"{CFG.api_base}{endpoint}"
    headers = {"Authorization": f"Bearer {CFG.admin_secret}", "Content-Type": "application/json"}
    async with session.post(url, json=payload, headers=headers, timeout=TIMEOUT) as r:
        body = await r.text()
        try:
            return json.loads(body) if body.strip() else {"status": r.status}
        except Exception:
            return {"raw": body, "status": r.status}

async def api_register_link(session: ClientSession, slug: str, chat_id: int, owner_id: int) -> dict:
    return await api_post(session, "/api/register-link", {"slug": slug, "chatId": str(chat_id), "ownerId": str(owner_id)})

async def api_claim_link(session: ClientSession, url_or_slug: str, user_id: int) -> dict:
    # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç /r/<slug>, index.html?slug=<slug> –∏–ª–∏ —Å–∞–º slug
    slug = None
    m = re.search(r"/r/([a-z0-9\-]{3,40})", url_or_slug)
    if m:
        slug = m.group(1)
    if not slug:
        m = re.search(r"[?&]slug=([a-z0-9\-]{3,40})", url_or_slug)
        if m:
            slug = m.group(1)
    if not slug:
        cand = url_or_slug.strip()
        if re.fullmatch(r"[a-z0-9\-]{3,40}", cand):
            slug = cand
    if not slug:
        raise RuntimeError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞/slug")
    return await api_post(session, "/api/claim-link", {"slug": slug, "chatId": str(user_id)})

# ---------- –ö–û–ú–ê–ù–î–´ ----------
async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç OneClick.\n\n"
        "–û–ø–ª–∞—Ç–∞: /buy\n"
        "–°—Ç–∞—Ç—É—Å: /status\n"
        "–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É: /create_site <slug>\n"
        "–ü—Ä–∏–≤—è–∑–∞—Ç—å –≥–æ—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É: /connect\n"
        "–ü–∏–Ω–≥: /ping"
    )

async def ping(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

async def buy(update: Update, _: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = STATE.get(uid)
    st["status"] = "waiting"
    await update.message.reply_text(
        f"üí≥ –û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ ‚Äî {PAY_AMOUNT_RUB} ‚ÇΩ\n"
        f"–ö–∞—Ä—Ç–∞: {PAY_CARD}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ —á–µ–∫ (—Ñ–æ—Ç–æ/–¥–æ–∫). –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –≤–∫–ª—é—á–∏—Ç –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π."
    )

async def approve_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != CFG.admin_telegram_id:
        return
    args = update.message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <user_id>")
        return
    uid = int(args[1])
    STATE.approve(uid)
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø (30 –¥–Ω–µ–π).")
    try:
        await context.bot.send_message(chat_id=uid, text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–æ–∑–¥–∞–π —Å—Å—ã–ª–∫—É: /create_site <slug>", reply_markup=timer_keyboard())
    except Exception as e:
        log.warning("notify user failed: %s", e)

async def reject_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != CFG.admin_telegram_id:
        return
    args = update.message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject <user_id>")
        return
    uid = int(args[1])
    STATE.reject(uid)
    await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –æ—Ç–∫–∞–∑–∞–Ω–æ.")
    try:
        await context.bot.send_message(chat_id=uid, text="‚ùå –ß–µ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–µ–∫: /buy")
    except Exception as e:
        log.warning("notify user failed: %s", e)

async def status_cmd(update: Update, _: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if STATE.is_active(uid):
        await update.message.reply_text(
            f"‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å: {format_remaining(STATE.remaining(uid))}",
            reply_markup=timer_keyboard(),
        )
    else:
        st = STATE.get(uid)
        await update.message.reply_text("‚è≥ –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã." if st["status"] == "waiting" else "‚ùå –î–æ—Å—Ç—É–ø –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. /buy")

async def connect_cmd(update: Update, _: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    STATE.wait_link.add(uid)
    await update.message.reply_text(
        "üì© –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: https://cick.one/index.html?slug=<slug> (–∏–ª–∏ /r/<slug>)."
    )

# ---------- –°–û–ó–î–ê–ù–ò–ï –°–°–´–õ–ö–ò (—Å –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–æ–π –≤–ª–∞–¥–µ–ª—å—Ü–∞) ----------
async def create_site(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not STATE.is_active(uid):
        await update.message.reply_text("üí∞ –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏ –∏ –¥–æ–∂–¥–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: /buy")
        return

    desired = (context.args[0] if context.args else "").strip()
    slug = slugify(desired) if desired else gen_slug(update.effective_user.username)

    await update.message.reply_text("‚è≥ –°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É‚Ä¶")
    async with ClientSession(timeout=TIMEOUT) as s:
        last_err = None
        for i in range(3):
            try:
                use_slug = slug if i == 0 else gen_slug(slug)
                reg = await api_register_link(s, use_slug, uid, uid)
                real_slug = reg.get("slug", use_slug)
                link = f"{CFG.public_base}/index.html?slug={real_slug}"

                # —Å–∂–∏–≥–∞–µ–º –∫–≤–æ—Ç—É
                st = STATE.get(uid)
                if st["link_quota"] <= 0:
                    await update.message.reply_text("‚ö†Ô∏è –õ–∏–º–∏—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω.")
                    return
                st["link_quota"] -= 1

                # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                await update.message.reply_text(
                    "‚úÖ –ì–æ—Ç–æ–≤–æ! –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞.\n"
                    "–°–∫–æ–ø–∏—Ä—É–π –µ—ë (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ). –Ø —Ç–∞–∫–∂–µ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–ª –µ—ë –∫ —Ç–µ–±–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                    reply_markup=copy_keyboard(link),
                )

                # ‚öôÔ∏è –∞–≤—Ç–æ-–ø—Ä–∏–≤—è–∑–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                try:
                    claim = await api_claim_link(s, real_slug, uid)  # –º–æ–∂–Ω–æ –¥–∞—Ç—å slug –∏–ª–∏ –ø–æ–ª–Ω—ã–π URL
                    log.info(f"[auto-claim] user {uid} -> {real_slug}: {claim}")
                except Exception as e:
                    log.warning(f"[auto-claim] failed for {uid}: {e}")

                return
            except Exception as e:
                last_err = str(e)
                # –µ—Å–ª–∏ —Å–ª–∞–≥ –∑–∞–Ω—è—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π
                if any(k in last_err.lower() for k in ("exist", "already", "–∑–∞–Ω—è—Ç", "conflict", "duplicate")):
                    continue
                break

        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É: {last_err or 'unknown'}")

# ---------- –ß–ï–ö–ò (—Ñ–æ—Ç–æ/–¥–æ–∫) ----------
async def handle_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    st = STATE.get(user.id)
    if st["status"] != "waiting":
        return  # –Ω–µ –∂–¥—ë–º —á–µ–∫ ‚Äî –∏–≥–Ω–æ—Ä

    msg: Message = update.message
    try:
        caption = f"üßæ –ß–µ–∫ –æ—Ç @{user.username or 'user'} (ID {user.id}). –ü—Ä–æ–≤–µ—Ä–∏—Ç—å?"
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{user.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user.id}"),
        ]])

        if msg.photo:
            await context.bot.send_photo(chat_id=CFG.admin_telegram_id, photo=msg.photo[-1].file_id, caption=caption, reply_markup=kb)
        elif msg.document:
            await context.bot.send_document(chat_id=CFG.admin_telegram_id, document=msg.document.file_id, caption=caption, reply_markup=kb)
        else:
            await context.bot.forward_message(chat_id=CFG.admin_telegram_id, from_chat_id=msg.chat_id, message_id=msg.message_id)
            await context.bot.send_message(chat_id=CFG.admin_telegram_id, text=caption, reply_markup=kb)

        await msg.reply_text("üßæ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ–∫–∞: %s", e)
        await msg.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —á–µ–∫ –∞–¥–º–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ /buy")

# ---------- –í–°–¢–ê–í–ö–ê –°–°–´–õ–ö–ò ----------
async def handle_link_insert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in STATE.wait_link:
        return
    text = (update.message.text or "").strip()
    async with ClientSession(timeout=TIMEOUT) as s:
        try:
            resp = await api_claim_link(s, text, uid)
            STATE.wait_link.discard(uid)
            await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –æ—Ç—á—ë—Ç—ã —Å –Ω–µ—ë –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å—Å—ã–ª–∫—É: {e}")

# ---------- CALLBACK-–ö–ù–û–ü–ö–ò ----------
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data or ""
    await q.answer()

    if data.startswith("approve:") or data.startswith("reject:"):
        if q.from_user.id != CFG.admin_telegram_id:
            await q.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
            return
        uid_str = data.split(":", 1)[1]
        if not uid_str.isdigit():
            await q.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")
            return
        uid = int(uid_str)
        if data.startswith("approve:"):
            STATE.approve(uid)
            try:
                await context.bot.send_message(chat_id=uid, text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! /create_site <slug>", reply_markup=timer_keyboard())
            except Exception:
                pass
            if q.message and q.message.caption:
                await q.edit_message_caption((q.message.caption or "") + "\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
            else:
                await q.message.reply_text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
        else:
            STATE.reject(uid)
            try:
                await context.bot.send_message(chat_id=uid, text="‚ùå –ß–µ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω. /buy")
            except Exception:
                pass
            if q.message and q.message.caption:
                await q.edit_message_caption((q.message.caption or "") + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
            else:
                await q.message.reply_text("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        return

    if data.startswith("copy:"):
        url = data.split(":", 1)[1]
        await q.message.reply_text(
            f"üîó –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É:\n{url}\n\n"
            "–ú–æ–∂–µ—à—å —Ç–∞–∫–∂–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ ¬´üß© –í—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥¬ª."
        )
        return

    if data == "insert_code":
        uid = q.from_user.id
        STATE.wait_link.add(uid)
        await q.message.reply_text(
            "üì© –û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ—é —Å—Å—ã–ª–∫—É.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: https://cick.one/index.html?slug=<slug> (–∏–ª–∏ /r/<slug>)."
        )
        return

    if data == "timer":
        uid = q.from_user.id
        if STATE.is_active(uid):
            await q.answer(f"–û—Å—Ç–∞–ª–æ—Å—å: {format_remaining(STATE.remaining(uid))}", show_alert=True)
        else:
            await q.answer("–î–æ—Å—Ç—É–ø –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)
        return

# ---------- MAIN ----------
def main():
    app = Application.builder().token(CFG.token).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("buy", buy))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CommandHandler("create_site", create_site))
    app.add_handler(CommandHandler("connect", connect_cmd))

    # –∞–¥–º–∏–Ω
    app.add_handler(CommandHandler("approve", approve_cmd))
    app.add_handler(CommandHandler("reject", reject_cmd))

    # —á–µ–∫–∏
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_receipt))

    # –≤—Å—Ç–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ —Ç–µ–∫—Å—Ç–æ–º
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link_insert))

    # –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(callback_handler))

    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ê–¥–º–∏–Ω: {CFG.admin_telegram_id}")
    app.run_polling(allowed_updates=None)

if __name__ == "__main__":
    main()
