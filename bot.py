# bot.py ‚Äî –ø—Ä–æ—Å—Ç–∞—è –≤–æ—Ä–æ–Ω–∫–∞ –æ–ø–ª–∞—Ç—ã —Å —Ä—É—á–Ω—ã–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ 30-–¥–Ω–µ–≤–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
# python-telegram-bot v20+, python-dotenv, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è sqlite3
# –õ–æ–≥–∏–∫–∞:
# /start ‚Üí –∫–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø" ‚Üí —Ä–µ–∫–≤–∏–∑–∏—Ç—ã + –∫–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫"
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —á–µ–∫ (—Ñ–æ—Ç–æ/–¥–æ–∫) ‚Üí —É—Ö–æ–¥–∏—Ç –∞–¥–º–∏–Ω—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
# –ê–¥–º–∏–Ω –∂–º–µ—Ç ‚úÖ ‚Üí –≤ –ë–î –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ 30 –¥–Ω–µ–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è)
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å /status. –ù–∏–∫–∞–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ –∫–æ–¥–æ–≤ –±–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–µ—Ç.

import os
import re
import json
import secrets
import string
import logging
import sqlite3
from dataclasses import dataclass
from typing import Optional, Tuple
from datetime import datetime, timezone, timedelta

from aiohttp import web
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, Message, ReplyKeyboardRemove
)
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler,
    CallbackQueryHandler, filters
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("bot")

# ---------- –ö–û–ù–§–ò–ì ----------
load_dotenv()
PAY_AMOUNT_RUB = int(os.getenv("PAY_AMOUNT_RUB", "5000"))
PAY_CARD = os.getenv("PAY_CARD", "4323 3473 6843 0150")

@dataclass
class Config:
    token: str
    admin_tid: int
    mode: str  # polling | webhook
    public_url: Optional[str]
    port: int
    db_path: str

def env_int(name: str, default: int) -> int:
    v = os.getenv(name, "").strip()
    return int(v) if v.isdigit() else default

def get_cfg() -> Config:
    token = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
    admin_tid = env_int("ADMIN_TELEGRAM_ID", 0)
    mode = (os.getenv("BOT_MODE", "polling").strip() or "polling").lower()
    public_url = os.getenv("PUBLIC_URL", os.getenv("RENDER_EXTERNAL_URL", "")).strip() or None
    port = env_int("PORT", 10000)
    db_path = os.getenv("USERS_DB_PATH", "data.db").strip()

    if not token:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is required")
    if not admin_tid:
        raise RuntimeError("ADMIN_TELEGRAM_ID is required (numeric)")

    return Config(
        token=token,
        admin_tid=admin_tid,
        mode=mode,
        public_url=public_url,
        port=port,
        db_path=db_path,
    )

CFG = get_cfg()

# ---------- –•–†–ê–ù–ò–õ–ò–©–ï (SQLite) ----------
def db_init():
    os.makedirs(os.path.dirname(CFG.db_path) or ".", exist_ok=True)
    with sqlite3.connect(CFG.db_path) as con:
        con.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            expires_at INTEGER,      -- unix timestamp (UTC)
            created_at INTEGER       -- unix timestamp (UTC)
        )
        """)
        con.commit()

def db_get_expiry(user_id: int) -> Optional[int]:
    with sqlite3.connect(CFG.db_path) as con:
        cur = con.execute("SELECT expires_at FROM users WHERE user_id = ?", (user_id,))
        row = cur.fetchone()
        return row[0] if row and row[0] is not None else None

def db_set_or_extend(user_id: int, delta_days: int = 30) -> int:
    """
    –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –±—É–¥—É—â–µ–º ‚Äî –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è.
    –ï—Å–ª–∏ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω ‚Äî –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π expires_at (unix).
    """
    now = int(datetime.now(timezone.utc).timestamp())
    current = db_get_expiry(user_id)
    base = current if (current and current > now) else now
    new_exp = base + delta_days * 24 * 60 * 60

    with sqlite3.connect(CFG.db_path) as con:
        if current is None:
            con.execute(
                "INSERT INTO users (user_id, expires_at, created_at) VALUES (?, ?, ?)",
                (user_id, new_exp, now)
            )
        else:
            con.execute(
                "UPDATE users SET expires_at = ? WHERE user_id = ?",
                (new_exp, user_id)
            )
        con.commit()
    return new_exp

# ---------- –£–¢–ò–õ–ò–¢–´ ----------
def format_dt_utc(ts_unix: int) -> str:
    dt = datetime.fromtimestamp(ts_unix, tz=timezone.utc)
    # –í—ã–≤–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω—É—é –¥–∞—Ç—É (UTC –º–µ—Ç–∫–∞ + ISO)
    return dt.strftime("%Y-%m-%d %H:%M UTC")

def days_left(ts_unix: int) -> int:
    now = int(datetime.now(timezone.utc).timestamp())
    if ts_unix <= now:
        return 0
    return (ts_unix - now) // (24 * 60 * 60)

def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")]]
    )

def after_buy_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫", callback_data="upload")]]
    )

def approve_kb(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}"),
        ]]
    )

# ---------- –•–ï–ù–î–õ–ï–†–´ ----------
async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –æ—Ñ–æ—Ä–º–ª—è–µ—à—å –¥–æ—Å—Ç—É–ø. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –æ–ø–ª–∞—Ç–∏ –∏ –ø—Ä–∏—à–ª–∏ —á–µ–∫ ‚Äî –º—ã –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏–º.\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ /status ‚Äî –ø–æ–∫–∞–∂–µ—Ç, –¥–æ –∫–∞–∫–æ–π –¥–∞—Ç—ã –∞–∫—Ç–∏–≤–µ–Ω –¥–æ—Å—Ç—É–ø.",
        reply_markup=main_menu_kb(),
    )

async def ping(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

async def status_cmd(update: Update, _: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    exp = db_get_expiry(user.id)
    if not exp:
        await update.message.reply_text("üîí –î–æ—Å—Ç—É–ø –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ñ–æ—Ä–º–∏ –æ–ø–ª–∞—Ç—É –∏ –ø—Ä–∏—à–ª–∏ —á–µ–∫. /buy")
        return
    left = days_left(exp)
    await update.message.reply_text(
        f"üîê –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: *{format_dt_utc(exp)}*  \n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: *{left}* –¥–Ω.",
        parse_mode="Markdown"
    )

async def buy_flow(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False):
    text = (
        f"üí≥ *–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞*\n\n"
        f"–°—É–º–º–∞: *{PAY_AMOUNT_RUB} ‚ÇΩ*\n"
        f"–ö–∞—Ä—Ç–∞: *{PAY_CARD}*\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ ¬´üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫¬ª –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω.\n"
        f"_–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–º –≤—Ä—É—á–Ω—É—é. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: /status_"
    )
    parse = "Markdown"
    if is_callback and update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(text, parse_mode=parse, reply_markup=after_buy_kb())
    else:
        await update.message.reply_text(text, parse_mode=parse, reply_markup=after_buy_kb())

async def buy_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await buy_flow(update, context, is_callback=False)

async def on_upload_click(update: Update, _: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text(
        "üì§ –ü—Ä–∏—à–ª–∏ —Å—é–¥–∞ *—Ñ–æ—Ç–æ* –∏–ª–∏ *—Ñ–∞–π–ª* —Å —á–µ–∫–æ–º. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –æ—Ç–≤–µ—Ç–∏–º.",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )

async def handle_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≤–∏–º –ª—é–±–æ–π —á–µ–∫ (—Ñ–æ—Ç–æ/–¥–æ–∫) –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    user = update.effective_user
    msg: Message = update.message
    caption = f"üßæ –ß–µ–∫ –æ—Ç @{user.username or 'user'} (ID {user.id}). –ü—Ä–æ–≤–µ—Ä–∏—Ç—å?"
    kb = approve_kb(user.id)

    try:
        if msg.photo:
            # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            await context.bot.send_photo(
                chat_id=CFG.admin_tid,
                photo=msg.photo[-1].file_id,
                caption=caption,
                reply_markup=kb
            )
        elif msg.document:
            await context.bot.send_document(
                chat_id=CFG.admin_tid,
                document=msg.document.file_id,
                caption=caption,
                reply_markup=kb
            )
        else:
            # –ù–∞ –≤—Å—è–∫–∏–π ‚Äî –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ä–≤–∞—Ä–¥
            await context.bot.forward_message(
                chat_id=CFG.admin_tid,
                from_chat_id=msg.chat_id,
                message_id=msg.message_id
            )
            await context.bot.send_message(chat_id=CFG.admin_tid, text=caption, reply_markup=kb)
        await msg.reply_text("üßæ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. /status")
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ–∫–∞ –∞–¥–º–∏–Ω—É: %s", e)
        await msg.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –∞–¥–º–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ /buy")

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data or ""
    uid = q.from_user.id

    # –ö–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø"
    if data == "buy":
        await buy_flow(update, context, is_callback=True)
        return

    if data == "upload":
        await on_upload_click(update, context)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ —É –∞–¥–º–∏–Ω–∞
    if (data.startswith("approve:") or data.startswith("reject:")) and uid != CFG.admin_tid:
        await q.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    if data.startswith("approve:"):
        await q.answer()
        target_id_str = data.split(":", 1)[1]
        if not target_id_str.isdigit():
            await q.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")
            return
        target_id = int(target_id_str)

        try:
            new_exp = db_set_or_extend(target_id, delta_days=30)
        except Exception as e:
            log.exception("DB set/extend failed: %s", e)
            await q.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø: {e}")
            return

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            left = days_left(new_exp)
            await context.bot.send_message(
                chat_id=target_id,
                text=(
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                    f"üîê –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: *{format_dt_utc(new_exp)}*\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å: *{left}* –¥–Ω.\n\n"
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: /status"
                ),
                parse_mode="Markdown"
            )
        except Exception as e:
            log.warning("notify user failed: %s", e)

        # –û—Ç–º–µ—Ç–∫–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ + –ø–æ–¥—Å–∫–∞–∑–∫–∞
        try:
            note = f"\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –î–æ—Å—Ç—É–ø –¥–æ {format_dt_utc(new_exp)}"
            if q.message and q.message.caption:
                await q.edit_message_caption((q.message.caption or "") + note)
            else:
                await q.message.reply_text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ." + note)
            await context.bot.send_message(
                chat_id=CFG.admin_tid,
                text=(
                    f"üë§ user_id *{target_id}* –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω/–ø—Ä–æ–¥–ª—ë–Ω –¥–æ *{format_dt_utc(new_exp)}*.\n"
                    "–ë–µ–∑ —Å—Å—ã–ª–æ–∫: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –∏—Ö –ø–æ–ª—É—á–∏—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ."
                ),
                parse_mode="Markdown"
            )
        except Exception:
            pass
        return

    if data.startswith("reject:"):
        await q.answer()
        target_id_str = data.split(":", 1)[1]
        if not target_id_str.isdigit():
            await q.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")
            return
        target_id = int(target_id_str)

        try:
            await context.bot.send_message(chat_id=target_id, text="‚ùå –ß–µ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. /buy")
        except Exception:
            pass
        try:
            if q.message and q.message.caption:
                await q.edit_message_caption((q.message.caption or "") + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
            else:
                await q.message.reply_text("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        except Exception:
            pass
        return

# ---------- HEALTH (–¥–ª—è webhook-—Ä–µ–∂–∏–º–∞ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏) ----------
async def _health(_: web.Request):
    return web.json_response({"ok": True, "mode": os.getenv("BOT_MODE", "polling")})

# ---------- MAIN ----------
def make_application() -> Application:
    db_init()

    app = Application.builder().token(CFG.token).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("buy", buy_cmd))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("status", status_cmd))

    # –ö–ª–∏–∫–∏ –ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º
    app.add_handler(CallbackQueryHandler(callback_handler))

    # –ß–µ–∫–∏: —Ñ–æ—Ç–æ/–¥–æ–∫
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_receipt))

    return app

def main():
    application = make_application()

    if CFG.mode == "webhook":
        # Webhook —Ä–µ–∂–∏–º (–Ω—É–∂–µ–Ω PUBLIC_URL)
        if not CFG.public_url:
            raise RuntimeError("PUBLIC_URL (–∏–ª–∏ RENDER_EXTERNAL_URL) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è webhook")
        path_secret = secrets.token_hex(16)
        hook_path = f"/tg/webhook/{path_secret}"
        log.info(f"[webhook] {CFG.public_url}{hook_path}  port={CFG.port}")
        application.run_webhook(
            listen="0.0.0.0",
            port=CFG.port,
            url_path=hook_path,
            webhook_url=f"{CFG.public_url}{hook_path}",
            allowed_updates=None,
            drop_pending_updates=True,
        )
        # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π /health ‚Äî –Ω—É–∂–Ω–æ –ø–æ–¥–Ω–∏–º–∞—Ç—å aiohttp-—Å–µ—Ä–≤–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ.
    else:
        # –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è Render ‚Äî polling
        log.info("[polling] bot started")
        application.run_polling(allowed_updates=None)

if __name__ == "__main__":
    main()
