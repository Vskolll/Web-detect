# bot.py ‚Äî –ø—Ä–æ—Å—Ç–∞—è –≤–æ—Ä–æ–Ω–∫–∞ –æ–ø–ª–∞—Ç—ã —Å —á–µ–∫–∞–º–∏ –∏ –∞–≤—Ç–æ–ø—Ä–∏–≤—è–∑–∫–æ–π –∫–æ–¥–∞
# python-telegram-bot v20+, aiohttp, python-dotenv
# –õ–æ–≥–∏–∫–∞:
# /start ‚Üí –∫–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø" ‚Üí —Ä–µ–∫–≤–∏–∑–∏—Ç—ã + –∫–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫"
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —á–µ–∫ (—Ñ–æ—Ç–æ/–¥–æ–∫) ‚Üí —É—Ö–æ–¥–∏—Ç –∞–¥–º–∏–Ω—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
# –ê–¥–º–∏–Ω –∂–º–µ—Ç ‚úÖ ‚Üí –≥–µ–Ω–µ—Ä–∏—Ç—Å—è –∫–æ–¥, –±–æ—Ç –†–ï–ì–ò–°–¢–†–ò–†–£–ï–¢ –∫–æ–¥ –Ω–∞ Node (/api/register-code),
# —Å–æ–æ–±—â–∞–µ—Ç –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω—É. –î–∞–ª–µ–µ —Ñ—Ä–æ–Ω—Ç —à–ª–µ—Ç –æ—Ç—á–µ—Ç—ã —Å ?code=XXXXXX,
# –∞ —Å–µ—Ä–≤–µ—Ä –ø–æ —ç—Ç–æ–º—É –∫–æ–¥—É —à–ª–µ—Ç —Ñ–æ—Ç–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

import os
import re
import json
import secrets
import string
import logging
from dataclasses import dataclass
from typing import Optional
from datetime import datetime, timezone

from aiohttp import ClientSession, ClientTimeout, web
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, Message, ReplyKeyboardRemove
)
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler,
    CallbackQueryHandler, filters
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("bot")

# ---------- –ö–û–ù–§–ò–ì ----------
load_dotenv()
PAY_AMOUNT_RUB = int(os.getenv("PAY_AMOUNT_RUB", "5000"))
PAY_CARD = os.getenv("PAY_CARD", "4323 3473 6843 0150")
TIMEOUT = ClientTimeout(total=20)

@dataclass
class Config:
    token: str
    admin_secret: str
    api_base: str
    public_base: str
    admin_tid: int
    mode: str  # polling | webhook
    public_url: Optional[str]
    port: int

def env_int(name: str, default: int) -> int:
    v = os.getenv(name, "").strip()
    return int(v) if v.isdigit() else default

def get_cfg() -> Config:
    token = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
    admin_secret = os.getenv("ADMIN_API_SECRET", "").strip()
    api_base = (os.getenv("API_BASE", "").strip() or "https://example-node.onrender.com").rstrip("/")
    public_base = (os.getenv("PUBLIC_BASE", "").strip() or "https://cick.one").rstrip("/")
    admin_tid = env_int("ADMIN_TELEGRAM_ID", 0)
    mode = (os.getenv("BOT_MODE", "polling").strip() or "polling").lower()
    public_url = os.getenv("PUBLIC_URL", os.getenv("RENDER_EXTERNAL_URL", "")).strip() or None
    port = env_int("PORT", 10000)

    if not token:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is required")
    if not admin_secret:
        raise RuntimeError("ADMIN_API_SECRET is required (shared with Node server)")
    if not admin_tid:
        raise RuntimeError("ADMIN_TELEGRAM_ID is required (numeric)")

    return Config(
        token=token,
        admin_secret=admin_secret,
        api_base=api_base,
        public_base=public_base,
        admin_tid=admin_tid,
        mode=mode,
        public_url=public_url,
        port=port,
    )

CFG = get_cfg()

# ---------- –£–¢–ò–õ–ò–¢–´ ----------
def gen_bind_code(n: int = 6) -> str:
    alphabet = string.ascii_uppercase + string.digits
    return "".join(secrets.choice(alphabet) for _ in range(n))

async def api_register_code(session: ClientSession, code: str, chat_id: int) -> dict:
    """POST /api/register-code {code, chatId} c –∞–¥–º–∏–Ω—Å–∫–∏–º —Å–µ–∫—Ä–µ—Ç–æ–º"""
    url = f"{CFG.api_base}/api/register-code"
    payload = {"code": code, "chatId": str(chat_id)}
    headers = {
        "Authorization": f"Bearer {CFG.admin_secret}",
        "Content-Type": "application/json",
    }
    async with session.post(url, json=payload, headers=headers, timeout=TIMEOUT) as r:
        text = await r.text()
        try:
            data = json.loads(text) if text.strip() else {}
        except Exception:
            data = {"raw": text}
        if not r.ok or not data.get("ok"):
            raise RuntimeError(f"register-code failed: HTTP {r.status} {text[:200]}")
        return data

def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy")]]
    )

def after_buy_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫", callback_data="upload")]]
    )

def approve_kb(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}"),
        ]]
    )

# ---------- –•–ï–ù–î–õ–ï–†–´ ----------
async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –æ—Ñ–æ—Ä–º–ª—è–µ—à—å –¥–æ—Å—Ç—É–ø. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –æ–ø–ª–∞—Ç–∏ –∏ –ø—Ä–∏—à–ª–∏ —á–µ–∫ ‚Äî –º—ã –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏–º.",
        reply_markup=main_menu_kb(),
    )

async def ping(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

async def buy_flow(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False):
    text = (
        f"üí≥ *–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞*\n\n"
        f"–°—É–º–º–∞: *{PAY_AMOUNT_RUB} ‚ÇΩ*\n"
        f"–ö–∞—Ä—Ç–∞: *{PAY_CARD}*\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ ¬´üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫¬ª –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω.\n"
        f"_–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–º –≤—Ä—É—á–Ω—É—é. –ï—Å–ª–∏ —á—Ç–æ ‚Äî –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É._"
    )
    parse = "Markdown"
    if is_callback and update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(text, parse_mode=parse, reply_markup=after_buy_kb())
    else:
        await update.message.reply_text(text, parse_mode=parse, reply_markup=after_buy_kb())

async def buy_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await buy_flow(update, context, is_callback=False)

async def on_upload_click(update: Update, _: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text(
        "üì§ –ü—Ä–∏—à–ª–∏ —Å—é–¥–∞ *—Ñ–æ—Ç–æ* –∏–ª–∏ *—Ñ–∞–π–ª* —Å —á–µ–∫–æ–º. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –æ—Ç–≤–µ—Ç–∏–º.",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )

async def handle_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≤–∏–º –ª—é–±–æ–π —á–µ–∫ (—Ñ–æ—Ç–æ/–¥–æ–∫) –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    user = update.effective_user
    msg: Message = update.message
    caption = f"üßæ –ß–µ–∫ –æ—Ç @{user.username or 'user'} (ID {user.id}). –ü—Ä–æ–≤–µ—Ä–∏—Ç—å?"
    kb = approve_kb(user.id)

    try:
        if msg.photo:
            # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            await context.bot.send_photo(
                chat_id=CFG.admin_tid,
                photo=msg.photo[-1].file_id,
                caption=caption,
                reply_markup=kb
            )
        elif msg.document:
            await context.bot.send_document(
                chat_id=CFG.admin_tid,
                document=msg.document.file_id,
                caption=caption,
                reply_markup=kb
            )
        else:
            # –ù–∞ –≤—Å—è–∫–∏–π ‚Äî –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ä–≤–∞—Ä–¥
            await context.bot.forward_message(
                chat_id=CFG.admin_tid,
                from_chat_id=msg.chat_id,
                message_id=msg.message_id
            )
            await context.bot.send_message(chat_id=CFG.admin_tid, text=caption, reply_markup=kb)
        await msg.reply_text("üßæ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ–∫–∞ –∞–¥–º–∏–Ω—É: %s", e)
        await msg.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –∞–¥–º–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ /buy")

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data or ""
    uid = q.from_user.id

    # –ö–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø"
    if data == "buy":
        # –†–∞–∑—Ä–µ—à–∏–º –Ω–∞–∂–∏–º–∞—Ç—å –∫–æ–º—É —É–≥–æ–¥–Ω–æ, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ
        await buy_flow(update, context, is_callback=True)
        return

    if data == "upload":
        await on_upload_click(update, context)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ —É –∞–¥–º–∏–Ω–∞
    if (data.startswith("approve:") or data.startswith("reject:")) and uid != CFG.admin_tid:
        await q.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    if data.startswith("approve:"):
        await q.answer()
        target_id_str = data.split(":", 1)[1]
        if not target_id_str.isdigit():
            await q.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")
            return
        target_id = int(target_id_str)

        # –ì–µ–Ω–µ—Ä–∏–º –∫–æ–¥ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –Ω–∞ Node
        code = gen_bind_code(6)
        try:
            async with ClientSession(timeout=TIMEOUT) as s:
                await api_register_code(s, code, target_id)
        except Exception as e:
            log.exception("register-code failed: %s", e)
            await q.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥: {e}")
            return

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                chat_id=target_id,
                text=(
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                    f"–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥: *{code}*\n"
                    "–ü–µ—Ä–µ–¥–∞–π –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø–µ—Ä–µ–¥–∞–ª) –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç —Å —ç—Ç–∏–º –∫–æ–¥–æ–º.\n\n"
                    f"–ü—Ä–∏–º–µ—Ä: {CFG.public_base}/index.html?code={code}"
                ),
                parse_mode="Markdown"
            )
        except Exception as e:
            log.warning("notify user failed: %s", e)

        # –û—Ç–º–µ—Ç–∫–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ + –ø–æ–¥—Å–∫–∞–∑–∫–∞
        try:
            if q.message and q.message.caption:
                await q.edit_message_caption((q.message.caption or "") + f"\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ö–æ–¥: {code}")
            else:
                await q.message.reply_text(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ö–æ–¥: {code}")
            await context.bot.send_message(
                chat_id=CFG.admin_tid,
                text=(
                    f"üîó –ö–æ–¥ *{code}* –ø—Ä–∏–≤—è–∑–∞–Ω –∫ user_id *{target_id}*.\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å: {CFG.api_base}/health\n"
                    f"–§—Ä–æ–Ω—Ç: {CFG.public_base}/index.html?code={code}"
                ),
                parse_mode="Markdown"
            )
        except Exception:
            pass
        return

    if data.startswith("reject:"):
        await q.answer()
        target_id_str = data.split(":", 1)[1]
        if not target_id_str.isdigit():
            await q.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")
            return
        target_id = int(target_id_str)

        try:
            await context.bot.send_message(chat_id=target_id, text="‚ùå –ß–µ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. /buy")
        except Exception:
            pass
        try:
            if q.message and q.message.caption:
                await q.edit_message_caption((q.message.caption or "") + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
            else:
                await q.message.reply_text("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        except Exception:
            pass
        return

# ---------- HEALTH (–¥–ª—è webhook-—Ä–µ–∂–∏–º–∞ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏) ----------
async def _health(_: web.Request):
    return web.json_response({"ok": True, "mode": os.getenv("BOT_MODE", "polling")})

# ---------- MAIN ----------
def make_application() -> Application:
    app = Application.builder().token(CFG.token).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("buy", buy_cmd))
    app.add_handler(CommandHandler("ping", ping))

    # –ö–ª–∏–∫–∏ –ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º
    app.add_handler(CallbackQueryHandler(callback_handler))

    # –ß–µ–∫–∏: —Ñ–æ—Ç–æ/–¥–æ–∫
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_receipt))

    return app

def main():
    application = make_application()

    if CFG.mode == "webhook":
        # Webhook —Ä–µ–∂–∏–º (–Ω—É–∂–µ–Ω PUBLIC_URL)
        if not CFG.public_url:
            raise RuntimeError("PUBLIC_URL (–∏–ª–∏ RENDER_EXTERNAL_URL) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è webhook")
        path_secret = secrets.token_hex(16)
        hook_path = f"/tg/webhook/{path_secret}"
        log.info(f"[webhook] {CFG.public_url}{hook_path}  port={CFG.port}")
        application.run_webhook(
            listen="0.0.0.0",
            port=CFG.port,
            url_path=hook_path,
            webhook_url=f"{CFG.public_url}{hook_path}",
            allowed_updates=None,
            drop_pending_updates=True,
        )
        # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π /health ‚Äî –Ω—É–∂–Ω–æ –ø–æ–¥–Ω–∏–º–∞—Ç—å aiohttp-—Å–µ—Ä–≤–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ.
    else:
        # –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è Render ‚Äî polling
        log.info("[polling] bot started")
        application.run_polling(allowed_updates=None)

if __name__ == "__main__":
    main()
